name: CD

on:
  push:
    branches:
      - main
      - staging

jobs:
  determine-tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.vars.outputs.tag }}
      env: ${{ steps.vars.outputs.env }}
    steps:
      - name: Determine tag name
        id: vars
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
            echo "env=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "tag=staging" >> $GITHUB_OUTPUT
            echo "env=staging" >> $GITHUB_OUTPUT
          else
            echo "tag=dev" >> $GITHUB_OUTPUT
            echo "env=staging" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    needs: determine-tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Build Docker image
        run: |
          docker build \
            --build-arg NODE_ENV=${{ needs.determine-tag.outputs.env }} \
            -t ${{ secrets.DOCKER_USERNAME }}/call-center-ai-frontend:${{ needs.determine-tag.outputs.tag }} .

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/call-center-ai-frontend:${{ needs.determine-tag.outputs.tag }}

      - name: Done
        run: |
          echo "Image pushed as tag: ${{ needs.determine-tag.outputs.tag }}"

  deploy:
    needs: [determine-tag, build-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /var/www/fe
            docker pull ${{ secrets.DOCKER_USERNAME }}/call-center-ai-frontend:${{ needs.determine-tag.outputs.tag }}
            docker stop call-center-ai-frontend || true && docker rm call-center-ai-frontend || true
            if [[ "${{ needs.determine-tag.outputs.tag }}" == "latest" ]]; then
              docker run -d \
                --name call-center-ai-frontend \
                -p 3000:3000 \
                --network my-network \
                -v /var/www/fe/config.json:/usr/share/nginx/html/config.json \
                ${{ secrets.DOCKER_USERNAME }}/call-center-ai-frontend:${{ needs.determine-tag.outputs.tag }}
            else
              docker run -d \
                --name call-center-ai-frontend \
                -p 3000:3000 \
                --network my-network \
                -v /var/www/fe/config.json:/usr/share/nginx/html/config.json \
                ${{ secrets.DOCKER_USERNAME }}/call-center-ai-frontend:${{ needs.determine-tag.outputs.tag }}
            fi
